identical(sr_dtfr$ssp585, sr_dtfr$ssp126)
identical(sr_dtfr$ssp585, sr_dtfr$current)
identical(sr_crop$current, sr_crop$ssp126)
identical(sr_crop$ssp585, sr_crop$ssp126)
identical(as.data.frame(sr_crop$ssp585), as.data.frame(sr_crop$ssp126))
sr_crop$ssp126
e1 <- app(sr_crop$ssp126, sum)
e2 <- app(sr_crop$ssp585, sum)
plot(e1)
plot(e2)
identical(e1, e2)
f1 <- app(sr$ssp126, sum)
f2 <- app(sr$ssp585, sum)
x11(); plot(f1)
x11(); plot(f2)
f2 <- app(sr$current, sum)
f3 <- app(sr$current, sum)
f2 <- app(sr$ssp585, sum)
x11(); plot(f1)
x11(); plot(f2)
x11(); plot(f3)
identical(f1, f2)
dmask
list.files(
here("data", "tidy", "rasters_species_richness"),
pattern = "ca",
full.names = T
)
supfam <- "all"
ens_alg <- "ca"
projt <- "ssp126"
mae
supfam <- "all"
ens_alg <- "ca"
projt <- "ssp126"
sp <- popaPlot(
projRasters         = mae,
type                = "presence_absence",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
sp_pa1 <- sp$species
projt <- "ssp585"
sp <- popaPlot(
projRasters         = mae,
type                = "presence_absence",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
sp_pa5 <- sp$species
x11(); plot(sp_pa1)
x11(); plot(sp_pa5)
x11(); plot(app(sp_pa1, sum))
x11(); plot(app(sp_pa5, sum))
x11(); plot(sp_pa1)
x11(); plot(sp_pa5)
names(sp_pa5)
names(sp_pa1)
lapply(
names(sp_pa1),
\(x) {
identical(subset(sp_pa1, x), subset(sp_pa1, y))
}
)
lapply(
names(sp_pa1),
\(x) {
identical(subset(sp_pa1, x), subset(sp_pa1, x))
}
)
x <- "Claremontiella nodulosa"
subset(sp_pa1, x)
subset(sp_pa1, x)
subset(sp_pa5, x)
as.data.frame(subset(sp_pa1, x))
identical(
as.data.frame(subset(sp_pa1, x)),
as.data.frame(subset(sp_pa5, x))
}
lapply(
names(sp_pa1),
\(x) {
identical(
as.data.frame(subset(sp_pa1, x)),
as.data.frame(subset(sp_pa5, x))
)
}
)
sp_pa5
sp_pa1
sp <- popaPlot(
projRasters         = mae,
type                = "adequation_environnementale",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
sp
projt <- "ssp126"
sp <- popaPlot(
projRasters         = mae,
type                = "adequation_environnementale",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
sp_pa1 <- sp$species
projt <- "ssp585"
sp <- popaPlot(
projRasters         = mae,
type                = "adequation_environnementale",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
sp_pa5 <- sp$species
lapply(
names(sp_pa1),
\(x) {
identical(
as.data.frame(subset(sp_pa1, x)),
as.data.frame(subset(sp_pa5, x))
)
}
)
projt <- "ssp126"
sp <- popaPlot(
projRasters         = mae,
type                = "adequation_environnementale",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
projt <- "ssp126"
sp1 <- popaPlot(
projRasters         = mae,
type                = "adequation_environnementale",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
projt <- "ssp585"
sp5 <- popaPlot(
projRasters         = mae,
type                = "adequation_environnementale",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
x11(); plot(sp1$combine)
x11(); plot(sp5$combine)
identical(as.data.frame(sp1), as.data.frame(sp5))
mae$adequation_environnementale$Majoidea$`Amphithrax hemphilli`$ca$ssp126
a <- mae$adequation_environnementale$Majoidea$`Amphithrax hemphilli`$ca$ssp126
a <- as.data.frame(a)
b <- mae$adequation_environnementale$Majoidea$`Amphithrax hemphilli`$ca$ssp585
b <- as.data.frame(b)
identical(a, b)
a
b
px <- "adequation_environnementale"
supfam <- "Majoidea"
spe <- "Mithraculus forceps"
# spe <- "Mithraculus forceps"
print(spe)
list.files(
here(popa_path, px, supfam, spe),
)
ens_alg <- "ca"
list.files(
here(
popa_path,
px, supfam, spe, ens_alg
),
full.names = T
)
out <- if (px == "adequation_environnementale") {
rast(f)
} else {
out_pa <- Sapply(
list.files(f, full.names = T), rast,
simplify = F, USE.NAMES = T
)
out_pa <- Reduce(c, out_pa)
t <- list.files(f) %>%
str_split("_") %>%
unlist() %>%
table()
names(out_pa) <- names(t)[t == 1] %>%
paste(names(out_pa), sep = ".")
out_pa <- as.list(out_pa)
names(out_pa) <- names(t)[t == 1]
out_pa
}
list.files(
here(
popa_path,
px, supfam, spe, ens_alg
),
full.names = T
)
f <- list.files(
here(popa_path, px, supfam, spe, ens_alg),
full.names = T
)[[1]]
f
f <- list.files(
here(popa_path, px, supfam, spe, ens_alg),
full.names = T
)[[2]]
out <- if (px == "adequation_environnementale") {
rast(f)
} else {
out_pa <- Sapply(
list.files(f, full.names = T), rast,
simplify = F, USE.NAMES = T
)
out_pa <- Reduce(c, out_pa)
t <- list.files(f) %>%
str_split("_") %>%
unlist() %>%
table()
names(out_pa) <- names(t)[t == 1] %>%
paste(names(out_pa), sep = ".")
out_pa <- as.list(out_pa)
names(out_pa) <- names(t)[t == 1]
out_pa
}
out
f <- list.files(
here(popa_path, px, supfam, spe, ens_alg),
full.names = T
)[[3]]
out2 <- if (px == "adequation_environnementale") {
rast(f)
} else {
out_pa <- Sapply(
list.files(f, full.names = T), rast,
simplify = F, USE.NAMES = T
)
out_pa <- Reduce(c, out_pa)
t <- list.files(f) %>%
str_split("_") %>%
unlist() %>%
table()
names(out_pa) <- names(t)[t == 1] %>%
paste(names(out_pa), sep = ".")
out_pa <- as.list(out_pa)
names(out_pa) <- names(t)[t == 1]
out_pa
}
ou
out
out2
identical(as.data.frame(out), as.data.frame(out2))
source(here::here("scripts", "boot.R"))
# Paramétrage bootstrap
n_resamp <- 10
# dossier de sortie
pout <- here("data", "tidy", "bootstrap_species_richness")
makeMyDir(pout)
supfam  <- "all"
ens_alg <- "ca"
projt   <- "ssp126"
file_name <- paste(supfam, ens_alg, projt, sep = "_")
sp <- popaPlot(
projRasters         = mae,
type                = "presence_absence",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
sp_pa <- sp$species
# Sélection des profondeurs 0-150m
sp_pa <- sp_pa * dmask
sp_cb <- sp$combine * dmask
# bootstrap
print("Bootsrap")
bootstrap <- lapply(
seq(1, n_resamp),
\(x) {
sample(
x       = names(sp_pa),
size    = length(names(sp_pa)),
replace = TRUE
)
})
print("Bootsrap ok")
# Sélection des noms uniques d'espèces
print("Selection des noms d'espèces")
bootstrap <- bootstrap %>%
lapply(\(nsp) unique(nsp))
print("Selection des noms d'espèces ok")
# Création de raster sommes de toutes les présences/absences des
# espèces selon le jeu d'espèces issu du bootstrap
print("Aggrégation du raster")
bootstrap_raster <- bootstrap %>%
lapply(\(nsp) app(subset(sp_pa, nsp), sum))
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(\(nsp) app(subset(sp_pa, nsp), sum))
t1 <- Sys.time()
t1-t0
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(\(nsp) app(subset(sp_pa, nsp), sum, cores = 8))
t1 <- Sys.time()
t1-t0
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(\(nsp) app(subset(sp_pa, nsp), sum, cores = 14))
t1 <- Sys.time()
t1-t0
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(\(nsp) app(subset(sp_pa, nsp), sum, cores = 10))
t1 <- Sys.time()
t1-t0
# Paramétrage bootstrap
n_resamp <- 50
bootstrap <- lapply(
seq(1, n_resamp),
\(x) {
sample(
x       = names(sp_pa),
size    = length(names(sp_pa)),
replace = TRUE
)
})
print("Bootsrap ok")
# Sélection des noms uniques d'espèces
print("Selection des noms d'espèces")
bootstrap <- bootstrap %>%
lapply(\(nsp) unique(nsp))
length(bootstrap)
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(\(nsp) app(subset(sp_pa, nsp), sum, cores = 1))
t1 <- Sys.time()
t1-t0
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(\(nsp) app(subset(sp_pa, nsp), sum, cores = 8))
t1 <- Sys.time()
t1-t0
doMPI::startMPIcluster(8)
doMPI::startMPIcluster(2)
parallel::detectCores()
parallel::makeCluster()
?makeCluster
getDefaultCluster()
parallel::getDefaultCluster()
parallel::getDefaultCluster()
parallel::getDefaultCluster()
parallel::makePSOCKcluster(8)
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(\(nsp) app(subset(sp_pa, nsp), sum, cores = 8))
t1 <- Sys.time()
t1-t0
parallel::stopCluster()
?sapp
parallel::getDefaultCluster()
?app
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(
\(nsp) app(
subset(sp_pa, nsp), fun = \(i, f) f(i), cores = 8, f = sum
)
)
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(
\(nsp) app(
subset(sp_pa, nsp), fun = \(i, f) f(i), f = sum, cores = 8
)
)
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(
\(nsp) app(
subset(sp_pa, nsp), fun = \(i) sum(i), cores = 8
)
)
1+1
1+1
open.connection()
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(
\(nsp) app(
subset(sp_pa, nsp), fun = \(i) sum(i), cores = 1
)
)
source("~/Documents/mosceco/r_projects/MOSCECO_L3/spatial_planification/scripts/boot.R", echo=TRUE)
i_supfam <- c("all")
i_ensalg <- c("wmean", "ca")
i_projtm <- c("current", "ssp126", "ssp585")
# Paramétrage bootstrap
n_resamp <- 10
# dossier de sortie
pout <- here("data", "tidy", "bootstrap_species_richness")
makeMyDir(pout)
supfam  <- "all"
ens_alg <- "ca"
projt   <- "ssp126"
file_name <- paste(supfam, ens_alg, projt, sep = "_")
sp <- popaPlot(
projRasters         = mae,
type                = "presence_absence",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
sp_pa <- sp$species
# Sélection des profondeurs 0-150m
sp_pa <- sp_pa * dmask
sp_cb <- sp$combine * dmask
# bootstrap
print("Bootsrap")
bootstrap <- lapply(
seq(1, n_resamp),
\(x) {
sample(
x       = names(sp_pa),
size    = length(names(sp_pa)),
replace = TRUE
)
})
print("Bootsrap ok")
# Sélection des noms uniques d'espèces
print("Selection des noms d'espèces")
bootstrap <- bootstrap %>%
lapply(\(nsp) unique(nsp))
print("Selection des noms d'espèces ok")
# Création de raster sommes de toutes les présences/absences des
# espèces selon le jeu d'espèces issu du bootstrap
print("Aggrégation du raster")
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(
\(nsp) app(
subset(sp_pa, nsp), fun = \(i) sum(i), cores = 1
)
)
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(
\(nsp) app(
subset(sp_pa, nsp), fun = \(i) sum(i)#, cores = 1
)
)
length(bootstrap)
app
terra:::app
showMethods(app)
?app
showMethods(app, "SpatRaster")
showMethods(app,classes =  "SpatRaster")
getMethod(app, "SpatRaster")
getMethod(app, "SpatRaster")
parallel::stopCluster(cores)
parallel::stopCluster(1)
parallel::stopCluster(2)
parallel::checkCluster()
parallel::checkCluster(1)
parallel::checkCluster(2)
parallel::checkCluster(3)
parallel::checkCluster(4)
parallel::checkCluster(8)
bootstrap
bootstrap_raster <- bootstrap %>%
lapply(
\(nsp) app(
subset(sp_pa, nsp), fun = \(i) sum(i)#, cores = 1
)
)
²t1 <- Sys.time()
bootstrap_raster
