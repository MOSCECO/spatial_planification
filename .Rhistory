path_inout  = path_inout
) # erreur : correspondance nom d'espèce avec un espace ou avec un "_"
# Fichier d'interation unités de gestion et élément de conservation :
# PuVSCFFile ----
puvspr <- unitsVScf(
spatial_raster = dataset,
path_inout     = path_inout
) # erreur : correspondance nom d'espèce avec un espace ou avec un "_"
# Fichier résumant les unités de gestion disponibles.
# PlanUnFile ----
PlanUnFile <- planningUnits(
spatRast_data   = dataset,
# spatRast_cost   = pr[[cost]],
# spatRast_status = pa$MPAnationalStatus,
pa_status       = pa_status,
cost_threshold  = cost_threshold,
path_inout      = path_inout
)
# 4. Éxecution de Marxan ----
# exécution marxan
setwd(path)
system(command = here(path, "Marxan_x64"))
# ou Marxan_x64.exe sous Windows
# traitement fichier de sortie marxan
rout <- outputMarxanFiles_ensta(
spatial_raster = speciesRichness, path_inout = path_inout
)
},
sp_names,
sp_subs,
sp_sr,
fichiers_sorties,
USE.NAMES = T,
SIMPLIFY  = F
)
# Visualisation des sorties de Marxan
my_crs <- "EPSG:4326"
# Vecteurs des frontières
shp  <- maps_marxan[[nisl]]
shp
fichiers_sorties
path <- fichiers_sorties[[nisl]]
path
subfam <- switch(supfam, all = "ALL", Majoidea = "MAJ", Muricoidea = "MUR")
subfam
path <- fichiers_sorties[[subfam]]
# raster
r <- rast(
list.files(here(path, "output"), pattern = "tif", full.names = T)
)
r <- terra::project(r, my_crs)
shp <- st_transform(shp, my_crs)
rdf <- as.data.frame(r, xy = T)
# richesse spécifique
d1 <- rdf %>% select(x, y, sum)
names(d1)[3] <- "Richesse\nspécifique"
p1 <- ggplot() +
geom_tile(data = d1, aes(x, y, fill = get("Richesse\nspécifique"))) +
scale_fill_viridis_c(limits = c(0, 26)) +
geom_sf(data = shp, fill = "lightgrey", col = NA) +
guides(fill = guide_colorbar(title = names(d1)[3])) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(
# axis.line            = element_blank(),
# axis.text            = element_blank(),
# axis.ticks           = element_blank(),
axis.title           = element_blank(),
panel.background     = element_blank(),
panel.border         = element_blank(),
panel.grid           = element_blank(),
panel.spacing        = unit(0, "lines"),
plot.background      = element_blank()
)
p1
p1
length(my_subsets[[subfam]])
p1 <- ggplot() +
geom_tile(data = d1, aes(x, y, fill = get("Richesse\nspécifique"))) +
scale_fill_viridis_c(limits = c(0, length(my_subsets[[subfam]]))) +
geom_sf(data = shp, fill = "lightgrey", col = NA) +
guides(fill = guide_colorbar(title = names(d1)[3])) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(
# axis.line            = element_blank(),
# axis.text            = element_blank(),
# axis.ticks           = element_blank(),
axis.title           = element_blank(),
panel.background     = element_blank(),
panel.border         = element_blank(),
panel.grid           = element_blank(),
panel.spacing        = unit(0, "lines"),
plot.background      = element_blank()
)
p1
# irremplaçabilité
d2 <- rdf %>% select(x, y, irremplacabilite)
names(d2)[3] <- "Irremplaçabilité"
p2 <- ggplot() +
geom_tile(data = d2, aes(x, y, fill = get("Irremplaçabilité"))) +
scale_fill_gradient(
low = "yellow2", high = "red", na.value = "white"
) +
geom_sf(data = shp, fill = "lightgrey", col = NA) +
guides(fill = guide_colorbar(title = names(d2)[3])) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(
# axis.line            = element_blank(),
# axis.text            = element_blank(),
# axis.ticks           = element_blank(),
axis.title           = element_blank(),
panel.background     = element_blank(),
panel.border         = element_blank(),
panel.grid           = element_blank(),
panel.spacing        = unit(0, "lines"),
plot.background      = element_blank()
)
p2
nisl
nisl
d1
d1 %>% head()
source(here::here("scripts", "boot.R"))
nisl <- "GLP"
projt <- "current"
supfam <- "all"
subfam <- switch(supfam, all = "ALL", Majoidea = "MAJ", Muricoidea = "MUR")
# 2. Sous-échantillons ####
my_subsets <- list(
ALL = c(
"Amphithrax hemphilli",
"Macrocoeloma nodipes",
"Mithraculus coryphe",
"Mithraculus forceps",
"Mithrax pleuracanthus",
"Omalacantha bicornuta",
"Stenorhynchus seticornis",
"Teleophrys ruber",
"Claremontiella nodulosa",
"Coralliophila galea",
"Coralliophila salebrosa",
"Favartia alveata",
"Favartia varimutabilis",
"Phyllonotus pomum",
"Siratus consuelae",
"Stramonita rustica",
"Trachypollia didyma",
"Vasula deltoidea",
NULL
) %>% sort(),
MAJ = c(
"Amphithrax hemphilli",
"Macrocoeloma nodipes",
"Mithraculus coryphe",
"Mithraculus forceps",
"Mithrax pleuracanthus",
"Omalacantha bicornuta",
"Stenorhynchus seticornis",
"Teleophrys ruber",
NULL
),
MUR = c(
"Claremontiella nodulosa",
"Coralliophila galea",
"Coralliophila salebrosa",
"Favartia alveata",
"Favartia varimutabilis",
"Phyllonotus pomum",
"Siratus consuelae",
"Stramonita rustica",
"Trachypollia didyma",
"Vasula deltoidea",
NULL
) %>% sort()
)
# 3. Choix des quantité d'unités de conservation à préserver ####
target <- c(
"Amphithrax hemphilli",
"Macrocoeloma nodipes",
"Mithraculus coryphe",
"Mithraculus forceps",
"Mithrax pleuracanthus",
"Omalacantha bicornuta",
"Stenorhynchus seticornis",
"Teleophrys ruber",
"Claremontiella nodulosa",
"Coralliophila galea",
"Coralliophila salebrosa",
"Favartia alveata",
"Favartia varimutabilis",
"Phyllonotus pomum",
"Siratus consuelae",
"Stramonita rustica",
"Trachypollia didyma",
"Vasula deltoidea",
NULL
) %>%
sort()
# Ou quantités identiques pour toutes les espèces
# À mettre en commentaire si des espèces sont sélectionnées dans
# la liste ci-dessus.
target <- 1
# Proportion des cellules des espèces à conserver
# target_prop <- rep(0.85, length(target))
# 4. Choix des pénalités pour la non-présence des espèces dans ####
# la réserve finale
spf <- c(
"Amphithrax hemphilli",
"Macrocoeloma nodipes",
"Mithraculus coryphe",
"Mithraculus forceps",
"Mithrax pleuracanthus",
"Omalacantha bicornuta",
"Stenorhynchus seticornis",
"Teleophrys ruber",
"Claremontiella nodulosa",
"Coralliophila galea",
"Coralliophila salebrosa",
"Favartia alveata",
"Favartia varimutabilis",
"Phyllonotus pomum",
"Siratus consuelae",
"Stramonita rustica",
"Trachypollia didyma",
"Vasula deltoidea",
NULL
)
# Ou quantités identiques pour toutes les espèces
# À mettre en commentaire si des espèces sont sélectionnées dans
# la liste ci-dessus.
spf <- 1000
# 5. Choix des coûts de mailles à partir des pressions anthropiques ####
# cost <- "global_cumul_impact_2013_all_layers"
# cost <- "invasives"
# cost <- "ocean_pollution"
# cost <- "pelagic_high_bycatch"
# cost <- "pelagic_low_bycatch"
# cost <- "plumes_fert"
# cost <- "plumes_pest"
# cost <- "population"
# cost <- "shipping"
# cost_threshold <- 0.85
cost_threshold <- "none"
cost <- 1
# 6. Prise en compte ou non du statut des mailles au sein du réseau AMP ####
status <- "NA"
# status <- "IN"
# status <- "OUT"
# 7. Choix du nombre de répétitions du modèle ####
# repetitions <- "auto"
repetitions <- 1000
nisl
path <- fichiers_sorties[[subfam]]
# raster
r <- rast(list.files(here(path, "output"), pattern = "tif", full.names = T))
r <- terra::project(r, my_crs)
shp <- st_transform(shp, my_crs)
# Visualisation des sorties de Marxan
my_crs <- "EPSG:4326"
# Vecteurs des frontières
shp  <- maps_marxan[[nisl]]
path <- fichiers_sorties[[subfam]]
# emprise spatiale
e <- ext_marxan[[nisl]]
# species
sp <- popaPlot(
projRasters        = mae,
type               = "presence_absence",
superfamily        = supfam,
ensemble_algorithm = "wmean",
projection_time    = projt,
do_plot            = FALSE,
do_plot_combine    = FALSE
)
sp_pa <- sp$species
# classification
cl <- read.csv(here("data", "tidy", "classification.csv"))
cl$Species <- cl$Species %>%
gsub(" ", "_", .)
cl$SpeciesID <- 1:nrow(cl)
# Passage de probabilité de présence à présence-absence
print(
paste(
"Le jeu de données biologique initial contient",
length(names(sp_pa)),
"espèces."
)
)
# Sous-ensemble de données
sp_subs <- sapply(
my_subsets,
\(my_sub) terra::subset(sp_pa, my_sub),
USE.NAMES = T,
simplify = F
)
# Noms des espèces dans les sous-ensembles
sp_names <- my_subsets
# Carte de richesse spécifique
sp_sr <- sapply(
sp_subs,
\(r) terra::app(r, sum),
USE.NAMES = T
)
repetitions <- if (!is.double(repetitions)) {
as.data.frame(sp) %>%
nrow() %>%
plyr::round_any(1000, f = ceiling)
} else { repetitions }
# 2. TARGET
# Traduction en nombre de cellules à intégrer dans la réserve finale
target_cell <- if(!is.double(target)) {
mapply(
\(spe, pro) {
m  <- sp_pa[[which(grepl(spe, names(sp)))]]
current <- table(as.data.frame(m))[2] %>% as.numeric()
protect <- ceiling(table(as.data.frame(m))[2]*pro) %>% as.numeric()
paste(
"L'espèce",
sub("_", " ", spe),
"est présente dans",
current,
"unités de conservation."
) %>% print()
paste(
protect, "unités de conservations seront sélectionnées pour conserver",
(pro*100) %>% paste0("%"),
"de cette distribution."
) %>% print()
return(protect)
},
target,
target_prop,
SIMPLIFY  = F,
USE.NAMES = T
)
}
# Abréviation dans le nom du modèle
TGT <- if (!is.double(target)) { "YES" } else { "NO" }
# Attribution des bonus/malus aux éléments de conservation
# SPF : Species Penalty Factor / CPF : Conservation Penalty Factor
# SPF PARAMETRE 04 ----
SPF <- ifelse(is.double(spf), spf, "SPE")
# PARAMETRE 05 COST ----
# Abréviation dans le nom du modèle
COST <- if (!is.double(cost)) { substr(toupper(cost), 1, 3)
} else { cost }
# Prise en compte du statut des cellules au sein du réseau AMP déjà existant
pa_status <- switch(
status,
`NA` = "none",
IN   = "locked_in",
OUT  = "locked_out"
)
# 3. Génération des fichiers pour Marxan ----
# Génération des fichiers pour faire fonctionner Marxan
# Fichiers d'entrées et de sorties de données pour Marxan
makeMyDir(here("data", "analysis", "marxan"))
marxan_file_names <- sapply(
names(sp_subs),
\(n) {
paste(
n,
paste(
# "PAT", pat,
"REP", repetitions,
"SPF", SPF,
"COS", COST,
"TGT", TGT,
"STT", status,
"ZON", nisl,
sep = "-"
),
sep = "_"
)
}
)
# Préparation du fichier de sortie
fichiers_sorties <- sapply(
marxan_file_names,
\(f) {
# Création du fichier correspondant au run Marxan
path <- here("data", "analysis", "marxan", f)
makeMyDir(path, del = T)
# Création des fichiers données et sorties pour le run
path_inout <- list(
input  = here(path, "input"),
output = here(path, "output")
)
lapply(path_inout, makeMyDir)
# Copie du logiciel Marxan
file.copy(
from = list.files(
here("scripts", "Marxan"),
pattern = "Marxan_x64$", # Marxan_x64$
full.names = T
),
to   = path
)
# Modification et copie du fichier de paramètres initiaux dans le fichier
# de sortie.
txt <- readLines(here("data", "raw", "input.dat"))
txt[14] <- sub("[0-9]+", repetitions, txt[14])
fileConn <- file(here(path, "input.dat"))
write(x = txt, file = fileConn)
close(fileConn)
return(path)
},
simplify = F,
USE.NAMES = T
)
# Visualisation des sorties de Marxan
my_crs <- "EPSG:4326"
# Vecteurs des frontières
shp  <- maps_marxan[[nisl]]
path <- fichiers_sorties[[subfam]]
# raster
r <- rast(list.files(here(path, "output"), pattern = "tif", full.names = T))
path
source("~/Documents/mosceco/r_projects/MOSCECO_L3/spatial_planification/scripts/marxan_02_routine.R", echo=TRUE)
# Visualisation des sorties de Marxan
my_crs <- "EPSG:4326"
# Vecteurs des frontières
shp  <- maps_marxan[[nisl]]
path <- fichiers_sorties[[subfam]]
# raster
r <- rast(list.files(here(path, "output"), pattern = "tif", full.names = T))
r <- terra::project(r, my_crs)
shp <- st_transform(shp, my_crs)
rdf <- as.data.frame(r, xy = T)
# richesse spécifique
d1 <- rdf %>% select(x, y, sum)
names(d1)[3] <- "Richesse\nspécifique"
x11(); plot(r)
sp_pa
sp_pa <- sp$species %>% terra::crop(e)
plot(sp_pa)
x11(); plot(climosaic$depth)
# Sélection des profondeurs 0-150m
dmask <- climosaic$depth %>%
terra::crop(e) %>%
ifel(. < -150, 1, NA)
# Sélection des profondeurs 0-150m
dmask <- climosaic$depth %>%
terra::crop(e)
dmask <- ifel(dmask > -150, 1, NA)
dmask
plot(dmask)
sp_pa2 <- sp_pa * dmask
x11(); plot(app(sp_pa2, sum))
my_subsets <- list(ALL = my_subsets$ALL)
my_subsets
source("~/Documents/mosceco/r_projects/MOSCECO_L3/spatial_planification/scripts/marxan_02_routine.R", echo=TRUE)
# Visualisation des sorties de Marxan
my_crs <- "EPSG:4326"
# Vecteurs des frontières
shp  <- maps_marxan[[nisl]]
path <- fichiers_sorties[[subfam]]
# raster
r <- rast(list.files(here(path, "output"), pattern = "tif", full.names = T))
r <- terra::project(r, my_crs)
shp <- st_transform(shp, my_crs)
rdf <- as.data.frame(r, xy = T)
# richesse spécifique
d1 <- rdf %>% select(x, y, sum)
names(d1)[3] <- "Richesse\nspécifique"
p1 <- ggplot() +
geom_tile(data = d1, aes(x, y, fill = get("Richesse\nspécifique"))) +
scale_fill_viridis_c(limits = c(0, length(my_subsets[[subfam]]))) +
geom_sf(data = shp, fill = "lightgrey", col = NA) +
guides(fill = guide_colorbar(title = names(d1)[3])) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(
# axis.line            = element_blank(),
# axis.text            = element_blank(),
# axis.ticks           = element_blank(),
axis.title           = element_blank(),
panel.background     = element_blank(),
panel.border         = element_blank(),
panel.grid           = element_blank(),
panel.spacing        = unit(0, "lines"),
plot.background      = element_blank()
)
p1
# irremplaçabilité
d2 <- rdf %>% select(x, y, irremplacabilite)
names(d2)[3] <- "Irremplaçabilité"
p2 <- ggplot() +
geom_tile(data = d2, aes(x, y, fill = get("Irremplaçabilité"))) +
scale_fill_gradient(
low = "yellow2", high = "red", na.value = "white"
) +
geom_sf(data = shp, fill = "lightgrey", col = NA) +
guides(fill = guide_colorbar(title = names(d2)[3])) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(
# axis.line            = element_blank(),
# axis.text            = element_blank(),
# axis.ticks           = element_blank(),
axis.title           = element_blank(),
panel.background     = element_blank(),
panel.border         = element_blank(),
panel.grid           = element_blank(),
panel.spacing        = unit(0, "lines"),
plot.background      = element_blank()
)
p2
r
plot(r)
