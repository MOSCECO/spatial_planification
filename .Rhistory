projRasters         = mae,
type                = "presence_absence",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
sp_pa <- sp$species
sp_pa
plot(sp_pa)
# Sélection des profondeurs 0-150m
sp_pa <- sp_pa * dmask
sp_cb <- sp$combine * dmask
plot(sp_cb)
plot(sp_ca)
plot(sp_pa)
# bootstrap
print("Bootsrap")
bootstrap <- lapply(
seq(1, n_resamp),
\(x) {
sample(
x       = names(sp_pa),
size    = length(names(sp_pa)),
replace = TRUE
)
})
print("Bootsrap ok")
bootstrap
# Sélection des noms uniques d'espèces
print("Selection des noms d'espèces")
bootstrap <- bootstrap %>%
lapply(\(nsp) unique(nsp))
print("Selection des noms d'espèces ok")
bootstrap
nsp <- bootstrap[[1]]
nsp
names(sp_pa)
names(subset(sp_pa, nsp))
subset(sp_pa, nsp)
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(
\(nsp) app(
subset(sp_pa, nsp), fun = \(i) sum(i)
)
)
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
lapply(
\(nsp) app(
subset(sp_pa, nsp), sum
)
)
t1 <- Sys.time()
t1-t0
nsp
sr_sub <- subset(sp_pa, nsp)
apply(sr_sub, c(1,2), sum)
as.array(sr_sub)
sr_arr <- as.array(sr_sub)
dim(sr_arr)
dim(sr_sub)
all_equal(sr_sub, sr_arr)
all_equal(sr_arr[, , 1], as.data.frame(sr_sub$`Omalacantha bicornuta`))
sr_sub[[1]]
sr_arr <- as.array(sr_sub)
apply(sr_arr, c(1,2), sum)
a <- apply(sr_arr, c(1,2), sum)
dim(a)
a
b <- rast(a)
b
plot(b)
# t0 <- Sys.time()
# bootstrap_raster <- bootstrap %>%
#   lapply(
#     \(nsp) app(
#       subset(sp_pa, nsp), sum ou \(i) sum(i) et cores = x
#     )
#   )
# t1 <- Sys.time()
# t1-t0
library(parallel)
detectCores() - 6
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
mclapply(
\(nsp) {
sr_sub <- subset(sp_pa, nsp)
sr_arr <- as.array(sr_sub)
apply(sr_arr, c(1,2), sum)
},
# mc.cores = detectCores() - 6
mc.cores = 1
)
# t0 <- Sys.time()
# bootstrap_raster <- bootstrap %>%
#   lapply(
#     \(nsp) app(
#       subset(sp_pa, nsp), sum ou \(i) sum(i) et cores = x
#     )
#   )
# t1 <- Sys.time()
# t1-t0
library(parallel)
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
mclapply(
\(nsp) {
sr_sub <- subset(sp_pa, nsp)
print(sr_sub)
sr_arr <- as.array(sr_sub)
print(sr_arr)
apply(sr_arr, c(1,2), sum)
},
# mc.cores = detectCores() - 6
mc.cores = 1
)
t1 <- Sys.time()
t1-t0
t0 <- Sys.time()
bootstrap_raster <- bootstrap %>%
mclapply(
\(nsp) {
sr_sub <- subset(sp_pa, nsp)
print(sr_sub)
sr_arr <- as.array(sr_sub)
print(sr_arr)
apply(sr_arr, c(1,2), sum)
},
mc.cores = detectCores() - 6
# mc.cores = 1
)
t1 <- Sys.time()
t1-t0
detectCores()
bootstrap_raster
bootstrap_raster <- bootstrap_array
bootstrap_array <- bootstrap_raster
bootstrap_raster <- bootstrap_array %>% lapply(rast)
bootstrap_raster
bootstrap_raster <- rast(bootstrap_array)
print(file_name)
source("~/Documents/mosceco/r_projects/MOSCECO_L3/spatial_planification/scripts/bootstrap_species_richness.R", echo=TRUE)
print(t1-t0)
probs
vec_probs <- c(0.025, 0.500, 0.975)
supfam  <- "all"
ens_alg <- "ca"
projt   <- "ssp126"
file_name <- paste(supfam, ens_alg, projt, sep = "_")
print(file_name)
sp <- popaPlot(
projRasters         = mae,
type                = "presence_absence",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
sp_pa <- sp$species
# Sélection des profondeurs 0-150m
sp_pa <- sp_pa * dmask
sp_cb <- sp$combine * dmask
# bootstrap
print("Bootsrap")
bootstrap <- lapply(
seq(1, n_resamp),
\(x) {
sample(
x       = names(sp_pa),
size    = length(names(sp_pa)),
replace = TRUE
)
})
print("Bootsrap ok")
# Sélection des noms uniques d'espèces
print("Selection des noms d'espèces")
bootstrap <- bootstrap %>%
lapply(\(nsp) unique(nsp))
print("Selection des noms d'espèces ok")
# Création de raster sommes de toutes les présences/absences des
# espèces selon le jeu d'espèces issu du bootstrap
print("Aggrégation du raster")
library(parallel)
t0 <- Sys.time()
bootstrap_array <- bootstrap %>%
mclapply(
\(nsp) {
sr_sub <- subset(sp_pa, nsp)
sr_arr <- as.array(sr_sub)
parPrint("Somme des rasters")
apply(sr_arr, c(1,2), sum)
parPrint("Somme des rasters ok")
},
mc.cores = detectCores() - 1
)
t1 <- Sys.time()
print(t1-t0)
print("Aggrégation du raster ok")
bootstrap_raster <- bootstrap_array %>% lapply(rast)
bootstrap_array
# functions
lapply(
list.files(
here("scripts", "FUN"),
full.names = T
),
source
)
print("Aggrégation du raster")
# t0 <- Sys.time()
# bootstrap_raster <- bootstrap %>%
#   lapply(
#     \(nsp) app(
#       subset(sp_pa, nsp), sum ou \(i) sum(i) et cores = x
#     )
#   )
# t1 <- Sys.time()
# t1-t0
t0 <- Sys.time()
bootstrap_array <- bootstrap %>%
mclapply(
\(nsp) {
sr_sub <- subset(sp_pa, nsp)
sr_arr <- as.array(sr_sub)
parPrint("Somme des rasters")
apply(sr_arr, c(1,2), sum)
parPrint("Somme des rasters ok")
},
mc.cores = detectCores() - 1
)
t1 <- Sys.time()
print(t1-t0)
print("Aggrégation du raster ok")
bootstrap_raster <- bootstrap_array %>% lapply(rast)
print("Aggrégation du raster")
# t0 <- Sys.time()
# bootstrap_raster <- bootstrap %>%
#   lapply(
#     \(nsp) app(
#       subset(sp_pa, nsp), sum ou \(i) sum(i) et cores = x
#     )
#   )
# t1 <- Sys.time()
# t1-t0
t0 <- Sys.time()
bootstrap_array <- bootstrap %>%
mclapply(
\(nsp) {
sr_sub <- subset(sp_pa, nsp)
sr_arr <- as.array(sr_sub)
parPrint("Somme des rasters")
out <- apply(sr_arr, c(1,2), sum)
parPrint("Somme des rasters ok")
return(out)
},
mc.cores = detectCores() - 1
)
t1 <- Sys.time()
print(t1-t0)
print("Aggrégation du raster ok")
bootstrap_raster <- bootstrap_array %>% lapply(rast)
b
bootstrap_raster
print("Changement des noms du raster")
bootstrap_raster <- Mapply(
\(r, id) {names(r) <- paste0("run", id) ; return(r)},
bootstrap_raster,
1:n_resamp
)
print("Changement des noms du raster ok")
bsr <- Reduce(c, bootstrap_raster)
# sauvegarde du raster de tous les runs de ré-échantillonnage
print("Sauvegarde")
writeRaster(
bsr,
here(pout, paste0("bootstrap_sr_", file_name, ".tif")),
overwrite = T
)
print("Sauvegarde ok")
bsr
x11(); plot(bsr)
bsr_arr <- as.array(bsr)
bsr_arr
dim(bsr_arr)
bsr_quant <- mclapply(
c(0.025, 0.500, 0.975),
\(prob) {
bsr_arr <- as.array(bsr)
apply(
bsr_arr, c(1,2), \(x) quantile(x, probs = prob, na.rm = T)
)
},
mc.cores = 3
)
bsr_quant
bsr_quant_rast <- bsr_quant %>% lapply(rast)
bsr_quant_rast
# aggrégation aux données initiales et sauvegarde
BSR <- c(sp$combine, Reduce(c, bsr_quant_rast))
sp$combine
Reduce(c, bsr_quant_rast)
bsr_quant_rast
plot(bsr_quant)
plot(bsr_quant_rast)
plot(bsr_quant_rast[[1]])
bsr_quant_rast[[1]]
ext(bsr_quant_rast)
ext(bsr_quant_rast[[1]])
res(bsr_quant_rast[[1]])
res(sp$combine)
res(bsr_quant_rast[[1]]) <- res(sp$combine)
ext(bsr_quant_rast[[1]]) <- ext(sp$combine)
bsr_quant_rast[[1]]
bsr_quant_rast <- bsr_quant %>% lapply(rast)
bsr_quant_rast[[1]]
bsr_quant[[1]]
?rast
crs(sp$combine)
rast(bsr_quant[[1]], crs = crs(sp$combine), ext = ext(sp$combine))
bsr_quant_rast <- bsr_quant %>%
lapply(rast, crs = crs(sp$combine), ext = ext(sp$combine))
# aggrégation aux données initiales et sauvegarde
BSR <- c(sp$combine, Reduce(c, bsr_quant_rast))
BSR
names(BSR) <- c("init", "q02.5", "q50.0", "q97.5")
BSR
writeRaster(
BSR,
here(pout, paste0("bootstrap_sr_est_", file_name, ".tif")),
overwrite = T
)
makeMyDir(here("figures", "species_richness_bootstrap"))
bootstrap_raster <- bootstrap_array %>%
lapply(rast, crs = crs(sp$combine), ext = ext(sp$combine))
bootstrap_raster
Sys.getenv("GITHUB_PAT")
Sys.unsetenv("GITHUB_PAT")
Sys.getenv("GITHUB_PAT")
source("~/Documents/mosceco/r_projects/MOSCECO_L3/spatial_planification/scripts/makefile.R", echo=TRUE)
# itérations sur
# i_supfam <- c("all", "Muricoidea", "Majoidea")
i_supfam <- c("all")
i_ensalg <- c("ca", "wmean")
i_projtm <- c("current", "ssp126", "ssp585")
# Paramétrage bootstrap
n_resamp <- 2
# dossier de sortie
pout <- here("data", "tidy", "bootstrap_species_richness")
makeMyDir(pout)
supfam  <- "all"
ens_alg <- "ca"
projt   <- "ssp126"
file_name <- paste(supfam, ens_alg, projt, sep = "_")
print(file_name)
sp <- popaPlot(
projRasters         = mae,
type                = "presence_absence",
superfamily         = supfam,
ensemble_algorithm  = ens_alg,
projection_time     = projt,
threshold_algorithm = "TSS",
do_plot             = FALSE,
do_plot_combine     = FALSE
)
sp_pa <- sp$species
# Sélection des profondeurs 0-150m
sp_pa <- sp_pa * dmask
sp_cb <- sp$combine * dmask
# bootstrap
print("Bootsrap")
bootstrap <- lapply(
seq(1, n_resamp),
\(x) {
sample(
x       = names(sp_pa),
size    = length(names(sp_pa)),
replace = TRUE
)
})
print("Bootsrap ok")
# Sélection des noms uniques d'espèces
print("Selection des noms d'espèces")
bootstrap <- bootstrap %>%
lapply(\(nsp) unique(nsp))
print("Selection des noms d'espèces ok")
# Création de raster sommes de toutes les présences/absences des
# espèces selon le jeu d'espèces issu du bootstrap
print("Aggrégation du raster")
# t0 <- Sys.time()
# bootstrap_raster <- bootstrap %>%
#   lapply(
#     \(nsp) app(
#       subset(sp_pa, nsp), sum ou \(i) sum(i) et cores = x
#     )
#   )
# t1 <- Sys.time()
# t1-t0
t0 <- Sys.time()
bootstrap_array <- bootstrap %>%
mclapply(
\(nsp) {
sr_sub <- subset(sp_pa, nsp)
sr_arr <- as.array(sr_sub)
parPrint("Somme des rasters")
out <- apply(sr_arr, c(1,2), sum)
parPrint("Somme des rasters ok")
return(out)
},
mc.cores = detectCores() - 1
)
t1 <- Sys.time()
print(t1-t0)
print("Aggrégation du raster ok")
bootstrap_raster <- bootstrap_array %>%
lapply(rast, crs = crs(sp$combine), ext = ext(sp$combine))
print("Changement des noms du raster")
bootstrap_raster <- Mapply(
\(r, id) {names(r) <- paste0("run", id) ; return(r)},
bootstrap_raster,
1:n_resamp
)
print("Changement des noms du raster ok")
bsr <- Reduce(c, bootstrap_raster)
# sauvegarde du raster de tous les runs de ré-échantillonnage
print("Sauvegarde")
writeRaster(
bsr,
here(pout, paste0("bootstrap_sr_", file_name, ".tif")),
overwrite = T
)
print("Sauvegarde ok")
prob <- "0.025"
# prob <- "0.025"
bsr_arr <- as.array(bsr)
bsr_arr
dim(bsr_arr)
parPrint("Quantile")
# Calcul de trois estimateurs de richesse spécifique
bsr_arr <- as.array(bsr)
chunks_rows <- dim(bsr_arr)[[1]]
dim(bsr_arr)[[1]]
bsr_quant <- lapply(
c(0.025, 0.500, 0.975),
\(prob) {
# prob <- "0.025"
parPrint("Quantile")
out <- apply(
bsr_arr, c(1,2), \(x) quantile(x, probs = prob, na.rm = T)
)
parPrint("Quantile ok")
return(out)
},
mc.cores = 3
)
# Calcul de trois estimateurs de richesse spécifique
bsr_arr <- as.array(bsr)
bsr_quant <- mclapply(
c(0.025, 0.500, 0.975),
\(prob) {
# prob <- "0.025"
parPrint("Quantile")
out <- apply(
bsr_arr, c(1,2), \(x) quantile(x, probs = prob, na.rm = T)
)
parPrint("Quantile ok")
return(out)
},
mc.cores = 3
)
chunks_rows <- dim(bsr_arr)[1] %>%
split(., ceiling(seq_along(.)/100))
chunks_cols <- dim(bsr_arr)[2] %>%
split(., ceiling(seq_along(.)/100))
chunks_rows
dim(bsr_arr)[1]
chunks_rows <- dim(bsr_arr)[1] %>%
split(., ceiling(seq_along(1:.)/100))
seq_along(100)
seq_along(1:100)
seq(1:100)
seq(1, 100)
chunks_rows <- dim(bsr_arr)[1] %>%
split(., ceiling(seq(1, .)/100))
dim(bsr_arr)[1]
split(
dim(bsr_arr)[1], ceiling(seq(1, dim(bsr_arr)[1])/100)
)
dim(bsr_arr)[1]
chunks_rows <- dim(bsr_arr)[1] %>%
split(1:., ceiling(seq(.)/100))
chunks_rows <- dim(bsr_arr)[1] %>%
split(1:., ceiling(seq_along(.)/100))
nr <- dim(bsr_arr)[1]
nr
nr <- dim(bsr_arr)[1]
nc <- dim(bsr_arr)[2]
1:nr
seq_along(nr)
seq_along(1:nr)
chunks_rows <- split(1:nr, ceiling(seq_along(1:nr)/100))
chunks_rows
chunks_cols <- split(1:nc, ceiling(seq_along(1:nc)/100))
chunks_cols
source("~/Documents/mosceco/r_projects/MOSCECO_L3/spatial_planification/scripts/bootstrap_species_richness.R", echo=TRUE)
?terra::quantile
