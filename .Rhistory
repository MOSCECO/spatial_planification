axis.title.y = element_blank(),
axis.line.y  = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()
)
} else {
plots_isl_bsr$init + theme(legend.position = "none")
}
return(plots_isl_bsr)
}
)
?ggexport
P <- Mapply(\(x, y) x + y, ps$GLP, ps$MTQ)
(P$init + P$q02.5) / (P$q50.0 + P$q97.5)
P$init / P$q02.5 / P$q50.0 / P$q97.5
x11(); ((P$init | P$q02.5) / (P$q50.0 | P$q97.5))
ps <- lapply(
islands,
\(nisl) {
# nisl <- "GLP"
# chargement des éléments du graphe
isl          <- maps[[nisl]]
e            <- ext(climatologies[[nisl]])
sr_crop      <- terra::crop(sr, e)
tb           <- as.data.frame(sr_crop, xy = T)
plots_isl_bsr <- Sapply(
names(tb[, 3:ncol(tb)]),
\(value) {
# value <- "q02.5"
nval <- switch(
value,
init  = "Modélisations",
q02.5 = "Ré-échantillonnage (quantile 2.5%)",
q50.0 = "Ré-échantillonnage (médiane)",
q97.5 = "Ré-échantillonnage (quantile 97.5%)"
)
# figures ggplot2
ggplot() +
geom_tile(
data = tb, aes(x = x, y = y, fill = factor(ceiling(get(value))))
) +
geom_sf(data = isl) +
scale_fill_viridis_d(limits = factor(0:max(tb$init)))  +
labs(title = nval, x = "Longitude", y = "Latitude") +
{
if (value == "init") guides(
fill = guide_legend("Richesse\nspécifique")
)
} +
{
if (value != "init") {
theme_map() +
theme(legend.position = "none")
}
}
})
# x11()
# plots_isl_bsr$init | (
#   (plots_isl_bsr$q02.5 / plots_isl_bsr$q50.0 / plots_isl_bsr$q97.5) +
#     plot_layout(guides = "collect")
# )
p <- (plots_isl_bsr$init | plots_isl_bsr$q02.5) /
(plots_isl_bsr$q50.0 | plots_isl_bsr$q97.5)
# nom des fichiers de sauvegarde
file_name <- paste(
"comparison", "bootstrap", "species", "richness",
tolower(nisl), ens_alg, nsr,
sep = "_"
) %>%
paste0(".png")
# sauvegarde
ggexport(
plot      = p,
filename  = here("figures", "species_richness_bootstrap", file_name),
width     = 2000,
height    = 1600,
res       = 100,
units     = "px",
device    = "png",
limitsize = F
)
# préparation de la seconde carte sans certains éléments graphiques
plots_isl_bsr$init <- if(nisl == "MTQ") {
plots_isl_bsr$init +
theme(
title        = element_blank(),
axis.title.y = element_blank(),
axis.line.y  = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()
)
} else {
plots_isl_bsr$init + theme(legend.position = "none")
}
return(plots_isl_bsr)
}
)
x11(); ((P$init | P$q02.5) / (P$q50.0 | P$q97.5))
P <- Mapply(\(x, y) x + y, ps$GLP, ps$MTQ)
x11(); ((P$init | P$q02.5) / (P$q50.0 | P$q97.5))
ps <- lapply(
islands,
\(nisl) {
# nisl <- "GLP"
# chargement des éléments du graphe
isl          <- maps[[nisl]]
e            <- ext(climatologies[[nisl]])
sr_crop      <- terra::crop(sr, e)
tb           <- as.data.frame(sr_crop, xy = T)
plots_isl_bsr <- Sapply(
names(tb[, 3:ncol(tb)]),
\(value) {
# value <- "q02.5"
nval <- switch(
value,
init  = "Modélisations",
q02.5 = "Ré-échantillonnage (quantile 2.5%)",
q50.0 = "Ré-échantillonnage (médiane)",
q97.5 = "Ré-échantillonnage (quantile 97.5%)"
)
# figures ggplot2
ggplot() +
geom_tile(
data = tb, aes(x = x, y = y, fill = factor(ceiling(get(value))))
) +
geom_sf(data = isl) +
scale_fill_viridis_d(limits = factor(0:max(tb$init)))  +
labs(title = nval, x = "Longitude", y = "Latitude") +
{
if (value == "init") guides(
fill = guide_legend("Richesse\nspécifique")
)
} +
{
if (value != "init") {
theme_map() +
theme(legend.position = "none")
}
}
})
# x11()
# plots_isl_bsr$init | (
#   (plots_isl_bsr$q02.5 / plots_isl_bsr$q50.0 / plots_isl_bsr$q97.5) +
#     plot_layout(guides = "collect")
# )
p <- (plots_isl_bsr$init | plots_isl_bsr$q02.5) /
(plots_isl_bsr$q50.0 | plots_isl_bsr$q97.5)
# nom des fichiers de sauvegarde
file_name <- paste(
"comparison", "bootstrap", "species", "richness",
tolower(nisl), ens_alg, nsr,
sep = "_"
) %>%
paste0(".png")
# sauvegarde
ggexport(
plot      = p,
filename  = here("figures", "species_richness_bootstrap", file_name),
width     = 2000,
height    = 1600,
res       = 100,
units     = "px",
device    = "png",
limitsize = F
)
# préparation de la seconde carte sans certains éléments graphiques
plots_isl_bsr$init <- if(nisl == "MTQ") {
plots_isl_bsr$init +
theme(
title        = element_blank(),
axis.title.y = element_blank(),
axis.line.y  = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()
)
} else {
plots_isl_bsr$init + theme(legend.position = "none")
}
plots_isl_bsr$q02.5 <- if(nisl == "MTQ") {
plots_isl_bsr$q02.5 + theme(title = element_blank())
} else { plots_isl_bsr$q02.5 }
plots_isl_bsr$q50.0 <- if(nisl == "MTQ") {
plots_isl_bsr$q50.0 + theme(title = element_blank())
} else { plots_isl_bsr$q50.0 }
plots_isl_bsr$q97.5 <- if(nisl == "MTQ") {
plots_isl_bsr$q97.5 + theme(title = element_blank())
} else { plots_isl_bsr$q97.5 }
return(plots_isl_bsr)
}
)
P <- Mapply(\(x, y) x + y, ps$GLP, ps$MTQ)
x11(); ((P$init | P$q02.5) / (P$q50.0 | P$q97.5))
# nom des fichiers de sauvegarde
file_name <- paste(
"comparison", "bootstrap", "species", "richness",
"ant", ens_alg, nsr,
sep = "_"
) %>%
paste0(".png")
# nom des fichiers de sauvegarde
file_name <- paste(
"comparison", "bootstrap", "species", "richness",
"ant", ens_alg, nsr,
sep = "_"
) %>%
paste0(".png")
ggexport(
plot      = P_out,
filename  = here("figures", "species_richness_bootstrap", file_name),
width     = 4200,
height    = 2000,
res       = 200,
units     = "px",
device    = "png",
limitsize = F
)
P_out <- (P$init | P$q02.5) / (P$q50.0 | P$q97.5)
# nom des fichiers de sauvegarde
file_name <- paste(
"comparison", "bootstrap", "species", "richness",
"ant", ens_alg, nsr,
sep = "_"
) %>%
paste0(".png")
ggexport(
plot      = P_out,
filename  = here("figures", "species_richness_bootstrap", file_name),
width     = 4200,
height    = 2000,
res       = 200,
units     = "px",
device    = "png",
limitsize = F
)
path_bsr <- here("figures", "species_richness_bootstrap")
names(rl)
nsr
source("~/Documents/mosceco/r_projects/MOSCECO_L3/spatial_planification/scripts/bootstrap_species_richness_figures.R", echo=TRUE)
bsr <- lapply(
# c("ca", "wmean"),
c("ca"),
\(ens_alg) {
# Dossier de sortie
path_ens_alg <- here("figures", "species_richness_bootstrap", ens_alg)
makeMyDir(path_ens_alg)
# Importation des raster de richesses spécifiques ré-échantillonnées
rl <- list.files(
here("data", "tidy", "bootstrap_species_richness"),
pattern = paste0("est.+", ens_alg),
full.names = T
) %>% lapply(rast)
names(rl) <- list.files(
here("data", "tidy", "bootstrap_species_richness"),
pattern = paste0("est.+", ens_alg)
) %>%
str_split("_") %>%
lapply(pluck, length(.[[1]])) %>%
lapply(\(x) substr(x, 1, nchar(x) - 4)) %>%
unlist(use.names = F)
# Graphes de comparaison entre richesse spécifiques modélisées et
# ré-échantillonnées
spec_pjs_plots <- Sapply(
names(rl),
\(nsr) {
# Dossier de sortie
path_nsr <- here(path_ens_alg, nsr)
makeMyDir(path_nsr)
# nsr <- names(rl)[[1]]
sr <- rl[[nsr]]
ps <- lapply(
islands,
\(nisl) {
# nisl <- "GLP"
# chargement des éléments du graphe
isl          <- maps[[nisl]]
e            <- ext(climatologies[[nisl]])
sr_crop      <- terra::crop(sr, e)
tb           <- as.data.frame(sr_crop, xy = T)
plots_isl_bsr <- Sapply(
names(tb[, 3:ncol(tb)]),
\(value) {
# value <- "q02.5"
nval <- switch(
value,
init  = "Modélisations",
q02.5 = "Ré-échantillonnage (quantile 2.5%)",
q50.0 = "Ré-échantillonnage (médiane)",
q97.5 = "Ré-échantillonnage (quantile 97.5%)"
)
# figures ggplot2
ggplot() +
geom_tile(
data = tb, aes(x = x, y = y, fill = factor(ceiling(get(value))))
) +
geom_sf(data = isl) +
scale_fill_viridis_d(limits = factor(0:max(tb$init)))  +
labs(title = nval, x = "Longitude", y = "Latitude") +
{
if (value == "init") guides(
fill = guide_legend("Richesse\nspécifique")
)
} +
{
if (value != "init") {
theme_map() +
theme(legend.position = "none")
}
}
})
# x11()
# plots_isl_bsr$init | (
#   (plots_isl_bsr$q02.5 / plots_isl_bsr$q50.0 / plots_isl_bsr$q97.5) +
#     plot_layout(guides = "collect")
# )
p <- (plots_isl_bsr$init | plots_isl_bsr$q02.5) /
(plots_isl_bsr$q50.0 | plots_isl_bsr$q97.5)
# nom des fichiers de sauvegarde
file_name <- paste(
"comparison", "bootstrap", "species", "richness",
tolower(nisl), ens_alg, nsr,
sep = "_"
) %>%
paste0(".png")
# sauvegarde
if (save_figures) {
ggexport(
plot      = p,
filename  = here(path_nsr, file_name),
width     = 2000,
height    = 1600,
res       = 100,
units     = "px",
device    = "png",
limitsize = F
)
}
# préparation de la seconde carte sans certains éléments graphiques
plots_isl_bsr$init <- if(nisl == "MTQ") {
plots_isl_bsr$init +
theme(
title        = element_blank(),
axis.title.y = element_blank(),
axis.line.y  = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()
)
} else {
plots_isl_bsr$init + theme(legend.position = "none")
}
plots_isl_bsr$q02.5 <- if(nisl == "MTQ") {
plots_isl_bsr$q02.5 + theme(title = element_blank())
} else { plots_isl_bsr$q02.5 }
plots_isl_bsr$q50.0 <- if(nisl == "MTQ") {
plots_isl_bsr$q50.0 + theme(title = element_blank())
} else { plots_isl_bsr$q50.0 }
plots_isl_bsr$q97.5 <- if(nisl == "MTQ") {
plots_isl_bsr$q97.5 + theme(title = element_blank())
} else { plots_isl_bsr$q97.5 }
return(plots_isl_bsr)
}
)
P <- Mapply(\(x, y) x + y, ps$GLP, ps$MTQ)
P_out <- (P$init | P$q02.5) / (P$q50.0 | P$q97.5)
# nom des fichiers de sauvegarde
file_name <- paste(
"comparison", "bootstrap", "species", "richness",
"ant", ens_alg, nsr,
sep = "_"
) %>%
paste0(".png")
if (save_figures) {
ggexport(
plot      = P_out,
filename  = here(path_nsr, file_name),
width     = 4200,
height    = 2000,
res       = 200,
units     = "px",
device    = "png",
limitsize = F
)
}
return(P)
})
})
source("~/Documents/mosceco/r_projects/MOSCECO_L3/spatial_planification/scripts/bootstrap_species_richness_figures.R", echo=TRUE)
source("~/Documents/mosceco/r_projects/MOSCECO_L3/spatial_planification/scripts/bootstrap_species_richness_figures.R", echo=TRUE)
rc <- bsr$ca$current$q50.0
rc <- bsr$ca$current$q50.0
r1 <- bsr$ca$ssp126$q50.0
r5 <- bsr$ca$ssp585$q50.0
class(rc)
ens_alg <- "ca"
# Importation des raster de richesses spécifiques ré-échantillonnées
rl <- list.files(
here("data", "tidy", "bootstrap_species_richness"),
pattern = paste0("est.+", ens_alg),
full.names = T
) %>% lapply(rast)
names(rl) <- list.files(
here("data", "tidy", "bootstrap_species_richness"),
pattern = paste0("est.+", ens_alg)
) %>%
str_split("_") %>%
lapply(pluck, length(.[[1]])) %>%
lapply(\(x) substr(x, 1, nchar(x) - 4)) %>%
unlist(use.names = F)
rl$current$q50.0
r0 <- rl$current$q50.0
r1 <- rl$ssp126$q50.0
r5 <- rl$ssp585$q50.0
# Soustraction
r01 <- r0 - r1
r05 <- r0 - r5
plot(r01)
r01
x11(); plot(r01)
r05 <- r0 - r5
x11(); plot(r05)
library(prioritizr)
vignette(package = "prioritizr")
r05
r01
r05
x11(); plot(r01)
x11(); plot(r05)
# Pourcentage de variation
r01 <- (r0 - r1)/max(r0, r1)
r01
plot(r01)
x11(); plot(r01)
r05 <- (r0 - r5)/max(r0, r5)
x11(); plot(r05)
r01 <- (r0 - r1)/max(r0, r1)
x11(); plot(r01)
r05 <- (r0 - r5)/max(r0, r5)
x11(); plot(r05)
r01
as.data.frame(r05)
a <- as.data.frame(r05)
table(a)
head(a)
table(a %>% round(2))
r05 <- (r5 - r0)/max(r0, r5)
x11(); plot(r05)
# Pourcentage de variation
r01 <- (r1 - r0)/max(r0, r1)
x11(); plot(r01)
2/3
a <- as.data.frame(r05)
a
table(a %>% round2)
table(a %>% round(2))
source("~/Documents/mosceco/r_projects/MOSCECO_L3/spatial_planification/scripts/boot.R", echo=TRUE)
tb <- tibble(
nrows = seq(500, 10000, 500),
times = as.numeric(mytimes)
)
sr <- list.files(
here("data", "tidy", "rasters_species_richness"),
pattern = "ca",
full.names = T
) %>% lapply(rast)
names(sr) <- list.files(
here("data", "tidy", "rasters_species_richness"),
pattern = "ca"
) %>%
str_split("_") %>%
lapply(pluck, length(.[[1]])) %>%
lapply(\(x) substr(x, 1, nchar(x) - 4)) %>%
unlist(use.names = F)
sr_crop <- lapply(sr, \(x) x * dmask)
sr_dtfr <- lapply(sr_crop, as.data.frame)
sr_dtfr %>% lapply(dim)
d0 <- sr_dtfr$current
d1 <- sr_dtfr$ssp126
mytimes <- lapply(
seq(500, 25000, 500),
\(nr) {
t0 <- Sys.time()
betapart::beta.temp(
d0[1:nr, ],
d1[1:nr, ]
)
t1 <- Sys.time()
return(t1 - t0)
}
)
mytimes <- lapply(
seq(500, 10000, 500),
\(nr) {
print(nr)
t0 <- Sys.time()
betapart::beta.temp(
d0[1:nr, ],
d1[1:nr, ]
)
t1 <- Sys.time()
return(t1 - t0)
}
)
tb <- tibble(
nrows = seq(500, 10000, 500),
times = as.numeric(mytimes)
)
ggplot(data = tb, aes(x = nrows, y = times)) +
geom_line() +
geom_point() +
xlab("Nombre de lignes dans le tableau") +
ylab("Temps en secondes")
times
mytimes
